<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id='moonunit-stub'>
  <refmeta>
    <refentrytitle>moonunit-stub</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>
  <refnamediv id='name'>
    <refname>moonunit-stub</refname>
    <refpurpose>Generates MoonUnit test loading stubs</refpurpose>
  </refnamediv>
  <refsynopsisdiv id='synopsis'>
    <cmdsynopsis>
      <command>moonunit</command>
      <arg choice='opt'><option>-o</option> <replaceable>file</replaceable></arg>
      <arg choice='opt' rep='repeat'><replaceable>name</replaceable>=<replaceable>value</replaceable></arg>
      <arg choice='plain' rep='repeat'><replaceable>sources</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1 id='description'>
    <title>Description</title>
    <para>
      <command>moonunit-stub</command> scans C and C++ source files for
      <emphasis>MoonUnit</emphasis> unit tests and generates a C stub file
      which assists the default test loader.  Scanned files
      are first processed by the C or C++ preprocessor.
    </para>
  </refsect1>

  <refsect1 id='rationale'>
    <title>Rationale</title>
    <para>
      The default <emphasis>MoonUnit</emphasis> test loader
      can use symbol information read from dynamic libraries
      to locate and access all unit tests. This symbol
      scanning process allows for convenient, rapid prototyping,
      but works only on some platforms.
    </para>
    <para>
      By scanning the source code for unit tests prior to compilation,
      <command>moonunit-stub</command> allows unit test modules to
      be loadable on all supported platforms.
    </para>
  </refsect1>
  
  <refsect1 id='options'>
    <title>Options</title>
    <para>
      <command>moonunit-stub</command> expects one or more C or C++ source files
      to be specified as arguments.
    </para>
    <para>
      In addition, the following options are available:
    </para>
    <variablelist remap='IP'>
      <varlistentry>
	<term><option>-o</option> <replaceable>file</replaceable></term>
	<listitem>
	  <para
	     >Write the generated stub to <replaceable>file</replaceable>.
	    By default, the stub is written to stdout.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-h</option></term>
	<term><option>--help</option></term>
	<listitem>
	  <para>List brief usage and option information and exit.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><replaceable>name</replaceable><literal>=</literal><replaceable>value</replaceable></term>
	<listitem>
	  <para>Sets an environment variable for the duration of this
	    scrpt.  This provides a convenient shorthand for
	    setting variables such as <literal>CPPFLAGS</literal>.
	    See <xref linkend="environment"/> for more details.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  
  <refsect1 id='environment'>
    <title>Environment</title>
  <variablelist>
    <varlistentry>
      <term><literal>CPP</literal></term>
      <listitem>
	<para>
	  The C preprocessor which will be invoked to process C source files
	  before scanning for unit tests.  Defaults to <command>cpp</command>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>CXXCPP</literal></term>
      <listitem>
	<para>
	  The C++ preprocessor which will be invoked to process C++ source files
	  before scanning for unit tests.  Defaults to <command>cpp</command>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>CPPFLAGS</literal></term>
      <listitem>
	<para>
	  Additional arguments which will be passed to the C preprocessor.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>CXXCPPFLAGS</literal></term>
      <listitem>
	<para>
	  Additional arguments which will be passed to the C++ preprocessor.
	  Defaults to the value of CPPFLAGS.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
  </refsect1>
  
  <refsect1 id='examples'><title>Examples</title>
    <variablelist>
      <varlistentry>
	<term><literal>moonunit-stub foo.c bar.c</literal></term>
	<listitem>
	  <para>
	    Scan <literal>foo.c</literal> and <literal>bar.c</literal> for unit
	    tests and write the resulting stub to stdout.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <literal>moonunit-stub -o stub.c bob.c CPP=&quot;gcc -E&quot;</literal>
	</term>
	<listitem>
	  <para>
	    Scan <literal>bob.c</literal> for tests and write the resulting stub to
	    <literal>stub.c</literal>; invokes <literal>gcc -E</literal> to preprocess
	    source files.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  
  <refsect1 id='copyright'><title>Copyright</title>
    <para>Copyright (c) 2007-2008, Brian Koropoff.  All rights reserved.</para>

    <para>Redistribution in source and binary form is permitted under
      the terms of the 3-clause BSD license.  See COPYING in the
      documentation or source distribution for details.
    </para>
  </refsect1>
  
  <refsect1 id='seealso'><title>See also</title>
    <para>
      <citerefentry><refentrytitle>moonunit-lt</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>moonunit</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>moonunit-strip</refentrytitle><manvolnum>1</manvolnum></citerefentry>
    </para>
  </refsect1>
</refentry>


AC_INIT([moonunit],[0.3],[bkoropoff __at__ gmail_com])
AC_CANONICAL_TARGET

case "$target_os" in
    solaris2.*)
        CPPFLAGS="$CPPFLAGS -D_XOPEN_SOURCE=500 -D__EXTENSIONS__"
	moduleext=".so"
	;;
    aix5.*|aix6.*)
	moduleext=".so"
	LDFLAGS="$LDFLAGS -Wl,-brtl"
	;;
    linux-gnu)
        moduleext=".so"
	;;
    hpux11.*)
	case "$target_cpu" in
	    hppa2.0*)
	        moduleext=".sl"
	        LDFLAGS="$LDFLAGS -Wl,+s"
	        ;;
	    *)
	        AC_MSG_ERROR([Unsupported architecture: $target_cpu])
		;;
        esac
	;;
    darwin8.*)
	moduleext=".so"
	;;
    freebsd6.*)
	moduleext=".so"
	;;
    *)
	AC_MSG_ERROR([Unsupported OS: $target_os])
	;;
esac

AM_INIT_AUTOMAKE([-Wall -Werror foreign])

AC_CONFIG_HEADERS(include/config.h)

AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AC_PATH_PROG(BASH, bash)

AC_CHECK_SIZEOF(void*)

WANT_LIBELF=yes

AC_ARG_ENABLE([debug],
	[AC_HELP_STRING([--enable-debug],
		[enable debugging])],
	[
		AC_DEFINE([DEBUG], [], [Debugging enabled])
		CFLAGS="$CFLAGS -O0 -g"
	],
	[])

AC_ARG_WITH([libelf],
	[AC_HELP_STRING([--with-libelf=<dir>],
		[use libelf located in <dir> to scan libraries for unit tests, or 'no' to disable])],
	[
		if test x"$withval" = x"no"
		then
			WANT_LIBELF=no
			LIBELF_INCLUDES=
	 		LIBELF_LDFLAGS=
	 	elif test x"$withval" = x"yes"
	 	then
	 		WANT_LIBELF=yes
	 		LIBELF_INCLUDES=
	 		LIBELF_LDFLAGS=
	 	else
			LIBELF_INCLUDES="-I$withval/include"
	 		LIBELF_LDFLAGS="-L$withval/lib",
	 	fi
	],
	[
		LIBELF_INCLUDES=
	 	LIBELF_LDFLAGS=
	])

plugindir="${libdir}/moonunit"

AC_SUBST(plugindir)
AC_SUBST(moduleext)
AC_SUBST(memberext)
AC_SUBST(LIB_socket)
AC_SUBST(LIB_dl)
AC_SUBST(LIB_pthread)

AM_CONDITIONAL([HAVE_MEMBEREXT], [test -n "$memberext"])

AC_CHECK_HEADERS([select.h sys/select.h execinfo.h])

AC_CHECK_LIB(socket, send, [LIB_socket="-lsocket"])
AC_CHECK_LIB(dl, dlopen, [LIB_dl="-ldl"])
AC_CHECK_LIB(pthread, pthread_self, [LIB_pthread="-lpthread"])
AC_CHECK_FUNCS([strsignal backtrace backtrace_symbols])

AC_MSG_CHECKING([symbol layout order])
AC_TRY_RUN(
	[
		struct s { int x, y; };

		struct s a = {0,1};
		struct s b = {2,3};

		int main (int argc, char** argv)
		{
			if (&b > &a)
			   return 0;
			else
			   return 1;
		}
	],
	[
		AC_MSG_RESULT([forward])
	],
	[
		AC_MSG_RESULT([reverse])
		AC_DEFINE([SYMBOL_LAYOUT_REVERSE], [], [Define if symbols are laid out in reverse textual order in object file])
	])

saved_LDFLAGS=$LDFLAGS
saved_CPPFLAGS=$CPPFLAGS

LDFLAGS="$LDFLAGS $LIBELF_LDFLAGS"
CPPFLAGS="$CPPFLAGS $LIBELF_INCLUDES"

if test x"$WANT_LIBELF" = x"yes"
then
	AC_CHECK_HEADER([libelf.h],[FOUND_LIBELF_H=yes],[FOUND_LIBELF_H=no])
	AC_CHECK_LIB(elf, elf_begin, [FOUND_LIBELF_LIB=yes], [FOUND_LIBELF_LIB=no])

	if test x"$FOUND_LIBELF_H" = x"yes" -a \
    	    x"$FOUND_LIBELF_LIB" = x"yes"
	then
		LIBELF_LIBADD="$LIBELF_LDFLAGS -lelf"
		AC_DEFINE(HAVE_LIBELF, [], [libelf available])
		FOUND_LIBELF=yes
		BACKEND=libelf
	else
		FOUND_LIBELF=no
		BACKEND=none
	fi
else
	FOUND_LIBELF=no
	BACKEND=none
fi

AM_CONDITIONAL([HAVE_LIBELF], [test x"$FOUND_LIBELF" = x"yes"])

AC_SUBST(LIBELF_INCLUDES)
AC_SUBST(LIBELF_LIBADD)

LDFLAGS=$saved_LDFLAGS
CPPFLAGS=$saved_CPPFLAGS

CFLAGS="$CFLAGS -Wall -Werror"
			 
HAVE_DOXYGEN=no
AC_CHECK_PROG([DOXYGEN], [doxygen], [doxygen], [false])
AM_CONDITIONAL([HAVE_DOXYGEN], [test x"$DOXYGEN" != x"false" && HAVE_DOXYGEN=yes])

HAVE_DOCBOOK=no
AC_CHECK_PROG([XSLTPROC], [xsltproc], [xsltproc], [false])

AC_MSG_CHECKING([DocBook XSL stylesheet directory])
DOCBOOK_SEARCH_PATH="/usr/share/xml/docbook/stylesheet/nwalsh"

for path in ${DOCBOOK_SEARCH_PATH}
do
	if test -d "$path"
	then
		DOCBOOK_XSL_DIR="$path"
	fi
done

if test x"${DOCBOOK_XSL_DIR}" = x
then
	AC_MSG_RESULT(not found)
else
	AC_MSG_RESULT($DOCBOOK_XSL_DIR)
fi

AC_SUBST(DOCBOOK_XSL_DIR)
AM_CONDITIONAL([HAVE_DOCBOOK], [test x"$XSLTPROC" != x"false" -a x"$DOCBOOK_XSL_DIR" != x && HAVE_DOCBOOK=yes])

AC_CONFIG_FILES([Makefile src/Makefile src/libmoonunit/Makefile src/moonunit/Makefile
		src/moonunit/moonunit-lt.sh src/moonunit/moonunit-stub.sh
		src/moonunit/moonunit-strip.sh include/Makefile include/moonunit/Makefile
		src/libuipc/Makefile src/plugins/Makefile include/uipc/Makefile doc/Makefile
		doc/Doxyfile doc/docbook-html.xsl doc/docbook-man.xsl extra/Makefile])

AC_OUTPUT

echo ""
echo ""
echo "Configuration summary"
echo
echo "Reflection backend:    $BACKEND"
if test x"$BACKEND" = x"none"
then
	echo " -- Warning: reflection-based test loading will"
	echo "    not work without libelf.  Only libraries"
	echo "    compiled with a stub generated by moonunit-stub"
	echo "    will be supported."
fi
echo "DocBook documentation: $HAVE_DOCBOOK"
echo "Doxygen documentation: $HAVE_DOXYGEN"
echo ""

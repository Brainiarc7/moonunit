#!@BASH_PATH@
#
# Helper functions for interacting with MoonUnit test harness
#
# Copyright (c) Brian Koropoff
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    #  Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#    #  Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#    #  Neither the name of the Moonunit project nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY BRIAN KOROPOFF ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL BRIAN KOROPOFF BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

MU_FF=$'\f'

mu_seq()
{
    local max="$2"
    local i="$1"

    while [ "$i" -le "$max" ]
    do
        echo "$i"
	i="$(($i + 1))"
    done
}

mu_enum_test_functions()
{
    set | grep '^test_[a-zA-Z_-]*[= ]() *$' | sed 's/[ =]() *$//g'
}

mu_run_if_exists()
{
    if type "$1" >/dev/null 2>&1
    then
	"$@"
    fi
}

mu_run_test()
{
    local suite="${1}"
    local name="${2}"
    local function="${3}"

    MU_EXPECT="success"

    MU_STAGE="library setup"
    mu_run_if_exists "library_setup"
    MU_STAGE="fixture setup"
    mu_run_if_exists "fixture_${suite}_setup"
    MU_STAGE="test"
    "${function}"
    MU_STAGE="fixture teardown"
    mu_run_if_exists "fixture_${suite}_teardown"
    MU_STAGE="library teardown"
    mu_run_if_exists "library_teardown"
}

mu_caller_file()
{
    echo ${BASH_SOURCE[2]}
}

mu_caller_line()
{
    echo ${BASH_LINENO[1]}
}

mu_format()
{
    local ff="$MU_FF"
    local str=""
    local arg

    for arg in "$@"
    do
	str="${str}${arg}${ff}"
    done

    echo "${str}" | sed -e 's/\'${ff}'$//'
}

mu_cmd()
{
    mu_format "$@" >& ${MU_CMD_OUT}
}

mu_rcv()
{
    local REPLY
    read REPLY <& ${MU_CMD_IN}
    echo "${REPLY}"
}

# Halts process, awaiting termination from harness
mu_halt()
{
    while true
    do
	sleep 999999
    done
}

mu_caller_backtrace()
{
    local ff="$MU_FF"
    local str=""
    local i

    for i in `mu_seq 2 ${#BASH_SOURCE[@]}`
    do
	str="${str}"${BASH_SOURCE[$i]}"${ff}"${BASH_LINENO[$(($i-1))]}"${ff}"
    done

    echo "${str}" | sed -e 's/\'${ff}'$//'
}

mu_expect()
{
    mu_cmd EXPECT "$1"
}

mu_success()
{
    local file=`mu_caller_file`
    local line=`mu_caller_line`
    
    mu_cmd RESULT success "$MU_STAGE" "$file" "$line" "Success"
    mu_halt
}

mu_failure()
{
    mu_cmd RESULT failure "$MU_STAGE" "`mu_caller_file`" "`mu_caller_line`" "$1" "`mu_caller_backtrace`"
    mu_halt
}

mu_assert()
{
    if ! "$@" >/dev/null 2>&1
    then
	mu_cmd RESULT assertion "$MU_STAGE" "`mu_caller_file`" "`mu_caller_line`" "Assertion failed: $*" "`mu_caller_backtrace`"
	mu_halt
    fi
}

mu_timeout()
{
    mu_cmd TIMEOUT "$1"
}

mu_warning()
{
    mu_cmd LOG warning "$MU_STAGE" "`mu_caller_file`" "`mu_caller_line`" "$1"
}

mu_info()
{
    mu_cmd LOG info "$MU_STAGE" "`mu_caller_file`" "`mu_caller_line`" "$1"
}

mu_verbose()
{
    mu_cmd LOG verbose "$MU_STAGE" "`mu_caller_file`" "`mu_caller_line`" "$1"
}

mu_debug()
{
    mu_cmd LOG debug "$MU_STAGE" "`mu_caller_file`" "`mu_caller_line`" "$1"
}

mu_trace()
{
    mu_cmd LOG trace "$MU_STAGE" "`mu_caller_file`" "`mu_caller_line`" "$1"
}

mu_resource_from_section()
{
    local section="$1"
    local key="$2"   
    mu_cmd RESOURCE_SECTION "${section}" "${key}" "${MU_STAGE}" "`mu_caller_file`" "`mu_caller_line`"
    mu_rcv
}

mu_resource()
{
    local key="$1"
    mu_cmd RESOURCE "${key}" "${MU_STAGE}" "`mu_caller_file`" "`mu_caller_line`"
    mu_rcv
}
